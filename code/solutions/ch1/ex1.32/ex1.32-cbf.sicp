; exercise 1.32, page 61

(define (cube x) (* x x x))
(define (inc x) (+ 1 x))

(define (pi-term i)
  (/
   (* 2 (quotient (+ i 3) 2))
   (+ 1 (* 2 (quotient (+ i 2) 2)))))

(define (acc-iter combiner null-value term a next b)
  (define (iter a result)
    (if (> a b)
        result
        (iter (next a) (combiner result (term a)))))
  (iter a null-value))

(define (sum-acc-iter term a next b)
  (acc-iter + 0 term a next b))

(define (prod-acc-iter term a next b)
  (acc-iter * 1 term a next b))

(define (simpson-acc-iter f a b n)
  (define h (/ (- b a) n))
  (define (y k) (f (+ a (* k h))))
  (define (term k)
    (cond
      ((= k 0) (y 0))
      ((= k n) (y n))
      ((even? k) (* 2 (y k)))
      (else (* 4 (y k)))))
  (* (/ h  3)
     (sum-acc-iter term 0 inc n)))

(define (pi-acc-iter n)
  (* 4.0 (prod-acc-iter pi-term 0 inc n)))

(display "
Implementing product and sum in terms of general accumulators:
")

(simpson-acc-iter cube 0 1 2)
(simpson-acc-iter cube 0 1 100)
(simpson-acc-iter cube 0 1 1000)
(simpson-acc-iter cube 0 1 10000)

(display "Estimate of π with 100 steps (prod-acc-iter): ")
(pi-acc-iter 100)
(newline)

(define (acc-rec combiner null-value term a next b)
  (if (> a b)
      null-value
      (combiner (term a)
                (acc-rec combiner null-value term (next a) next b))))

(define (sum-acc-rec term a next b)
  (acc-rec + 0 term a next b))

(define (prod-acc-rec term a next b)
  (acc-rec * 1 term a next b))

(define (simpson-acc-rec f a b n)
  (define h (/ (- b a) n))
  (define (y k) (f (+ a (* k h))))
  (define (term k)
    (cond
      ((= k 0) (y 0))
      ((= k n) (y n))
      ((even? k) (* 2 (y k)))
      (else (* 4 (y k)))))
  (* (/ h  3)
     (sum-acc-rec term 0 inc n)))

(define (pi-acc-rec n)
  (* 4.0 (prod-acc-rec pi-term 0 inc n)))

(display "
Implementing product and sum in terms of general accumulators:
")

(simpson-acc-rec cube 0 1 2)
(simpson-acc-rec cube 0 1 100)
(simpson-acc-rec cube 0 1 1000)
(simpson-acc-rec cube 0 1 10000)

(display "Estimate of π with 100 steps (prod-acc-rec): ")
(pi-acc-rec 100)
