; exercise 1.45, page 78

(define (average x y)
  (/ (+ x y) 2))

(define (expt b n)
  (expt-iter b n 1))

(define (expt-iter b counter product)
  (if (= counter 0)
      product
      (expt-iter b
                (- counter 1)
                (* b product))))

(define (compose f g)
  (lambda (x) (f (g x))))

(define (repeated f n)
  (if (= n 1)
      (lambda (x) (f x))
      (compose f (repeated f (- n 1)))))

(define (fixed-point f first-guess)
  (define tolerance 0.00001)
  (define (close-enough? v1 v2)
    (< (abs (- v1 v2)) tolerance))
  (define (try guess)
    (let ((next (f guess)))
      (if (close-enough? guess next)
          next
          (try next))))
  (try first-guess))

(define (average-damp f)
  (lambda (x) (average x (f x))))

(define (repeated-damp n)
  (repeated average-damp n))

(define (root-damp x n damp-count)
  (fixed-point
    ((repeated-damp damp-count) (lambda (y) (/ x  (expt y (- n 1))  )))
   5.0))

(root-damp 9 2 1)
(root-damp 81 4 2)
(root-damp 2187 8 3)
(root-damp 1000 16 4)
(root-damp 1000 50 6)

(define (calc-damp n)
  (floor (/ (log n) (log 2))))

(define (root x n)
  (root-damp x n (calc-damp n)))

(root 9 2)
(root 81 4)
(root 2187 8)
(root 1000 16)
(root 1000 50)
