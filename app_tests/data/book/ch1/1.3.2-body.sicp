(define (sum term a next b)
  (if (> a b)
      0
      (+ (term a)
         (sum term (next a) next b))))

(define (cube x) (* x x x))

; section 1.3.2, page 62

(lambda (x) (+ x 4))
((lambda (x) (+ x 4)) 3)

(lambda (x) (/ 1.0 (* x (+ x 2))))
((lambda (x) (/ 1.0 (* x (+ x 2)))) 2)

(define (pi-sum a b)
  (sum (lambda (x) (/ 1.0 (* x (+ x 2))))
       a
       (lambda (x) (+ x 4))
       b))
(* 8 (pi-sum 1 100))

(define (integral f a b dx)
  (* (sum f (+ a (/ dx 2.0))
            (lambda (x) (+ x dx))
            b)
     dx))
(integral cube 0 1 0.001)

(define (plus4 x) (+ x 4))
(plus4 3)

; section 1.3.2, page 63

(define plus4 (lambda (x) (+ x 4)))
(plus4 3)

((lambda (x y z) (+ x y (square z))) 1 2 3)

; section 1.3.2, page 64

(define (f x y)
  (define (f-helper a b)
    (+ (* x (square a))
       (* y b)
       (* a b)))
  (f-helper (+ 1 (* x y))
            (- 1 y)))
(f 2 3)

(define (f x y)
  ((lambda (a b)
     (+ (* x (square a))
        (* y b)
        (* a b)))
   (+ 1 (* x y))
   (- 1 y)))
(f 2 3)

; section 1.3.2, page 65
(define x 5)
(+ (let ((x 3))
     (+ x (* x 10)))
   x)

(define x 2)
(let ((x 3)
      (y (+ x 2)))
  (* x y))

; section 1.3.2, page 66

(define (f x y)
  (define a
    (+ 1 (* x y)))
  (define b (- 1 y))
  (+ (* x (square a))
     (* y b)
     (* a b)))

(f 2 3)
