; exercise 1.33, page 61

(define (identity x) x)
(define (inc x) (+ 1 x))

(define (prime? n)
  (define (smallest-divisor-next-inline n)
    (define (find-divisor n test-divisor)
      (define (square n) (* n n))
      (define (divides? a b)
        (= (remainder b a) 0))
      (cond ((> (square test-divisor) n) n)
            ((divides? test-divisor n) test-divisor)
            (else (find-divisor n (if (= test-divisor 2)
                                      3
                                      (+ test-divisor 2))))))
    (find-divisor n 2))
  (if (< n 2)
      false
      (= n (smallest-divisor-next-inline n))))

(define (gcd a b)
  (if (= b 0)
      a
      (gcd b (remainder a b))))

(define
  (filtered-accumulate include-a? combiner null-value term a next b)
  (define (iter a result)
    (if (> a b) result
        (if (include-a? a)
            (iter (next a) (combiner result (term a)))
            (iter (next a) result))))
  (iter a null-value))

(define (sum-square-primes a b)
  (define (square n) (* n n))
  (filtered-accumulate prime? + 0 square a inc b))

(display "
Sum Square Primes:
")
(sum-square-primes 1 5)
(sum-square-primes 1000 1020)

(define (product-of-coprimes n)
  (define (coprime? a)
    (= 1 (gcd a n)))
  (filtered-accumulate coprime? * 1 identity 2 inc n))

(display "
Product of Coprimes:
")
(product-of-coprimes 12)
(product-of-coprimes 11)
